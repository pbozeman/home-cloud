repositories:
  - name: grafana
    url: https://grafana.github.io/helm-charts

  - name: ingress-nginx
    url: https://kubernetes.github.io/ingress-nginx

  - name: jetstack
    url: https://charts.jetstack.io

  - name: longhorn
    url: https://charts.longhorn.io

  - name: metallb
    url: https://metallb.github.io/metallb

  - name: prometheus-community
    url: https://prometheus-community.github.io/helm-charts

  - name: twuni
    url: https://helm.twun.io

releases:
  #
  # Longhorn
  #
  - name: longhorn
    namespace: longhorn-system
    chart: longhorn/longhorn
    version: 1.5.3
    wait: true
    values:
      - service:
          ui:
            type: ClusterIP

  #
  # metallb
  #
  - name: metallb
    namespace: metallb-system
    chart: metallb/metallb
    version: 0.13.12
    wait: true

    # TODO: this seems so janky. this can't really be the best practice, is it?
    hooks:
      - events: ["postsync"]
        showlogs: true
        command: "sh"
        args:
          - "-c"
          - |
            kubectl wait --for=condition=available --timeout=60s deployment/metallb-controller -n metallb-system
            kubectl apply -f manifests/metallb/addresspool.yaml

  #
  # cert-manager
  #
  - name: cert-manager
    namespace: cert-manager
    chart: jetstack/cert-manager
    version: v1.7.1
    wait: true
    labels:
      name: cert-manager
    set:
      - name: installCRDs
        value: true

  #
  # Wildcard
  #
  - name: wildcard
    namespace: cert-manager
    chart: ./charts/wildcard
    version: 0.1.0
    wait: true
    values:
      - values/common.yaml
    secrets:
      - secrets/cloudflare.yaml

  #
  # Nginx
  #
  - name: ingress-nginx
    namespace: ingress-nginx
    createNamespace: true
    chart: ingress-nginx/ingress-nginx
    version: 4.8.3
    wait: true
    needs:
      - cert-manager/wildcard
    values:
      - values/nginx-ingress.yaml

  #
  # prometheus
  #
  # NOTE: the first time helmfile is run it must be done with sync rather than
  # apply, otherwise the crds don't get installed.
  #
  # TODO: see if something like the installCRDs from cert-manager will work here
  #
  # see https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
  # for cleanup
  - name: kube-prometheus-stack
    namespace: monitoring
    chart: prometheus-community/kube-prometheus-stack
    version: 54.1.0
    needs:
      - ingress-nginx/ingress-nginx
      - longhorn-system/longhorn
    values:
      - values/common.yaml
      - values/prometheus.yaml
    hooks:
      - events: ["postsync"]
        showlogs: true
        command: "kubectl"
        args: ["apply", "-f", "manifests/monitoring/"]

  #
  # loki
  #
  - name: loki-stack
    namespace: logging
    chart: grafana/loki-stack
    version: 2.9.11
    needs:
      - ingress-nginx/ingress-nginx
      - longhorn-system/longhorn
    values:
      - values/loki-stack.yaml

  #
  # Docker registry
  #
  - name: docker-registry
    namespace: docker-registry
    chart: twuni/docker-registry
    version: 2.2.2
    wait: true
    needs:
      - ingress-nginx/ingress-nginx
      - longhorn-system/longhorn
    values:
      - values/docker-registry.yaml
    secrets:
      - secrets/docker-registry.yaml

  #
  # mosquitto-mqtt
  #
  - name: mosquitto-mqtt
    namespace: home-automation
    chart: ./charts/mosquitto-mqtt
    version: 1.0.0
    needs:
      - docker-registry/docker-registry
      - longhorn-system/longhorn
    set:
      - name: installCRDs
        value: true
    values:
      - values/mosquitto-mqtt.yaml
    secrets:
      - secrets/mosquitto-mqtt.yaml

  #
  # zigbee2mqtt
  #
  - name: zigbee2mqtt
    namespace: home-automation
    chart: ./charts/zigbee2mqtt
    version: 1.0.0
    needs:
      - home-automation/mosquitto-mqtt

  #
  # home-assistant
  #
  - name: home-assistant
    namespace: home-automation
    chart: ./charts/home-assistant
    version: 1.0.0
    needs:
      - docker-registry/docker-registry
      - ingress-nginx/ingress-nginx
      - longhorn-system/longhorn
    values:
      - values/home-assistant.yaml
    secrets:
      - secrets/docker-registry.yaml
    hooks:
      - events: ["presync"]
        showlogs: true
        command: "sh"
        args: ["../images/home-assistant/build.sh"]
